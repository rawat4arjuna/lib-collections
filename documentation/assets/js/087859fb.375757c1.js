"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5676],{6461:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/rexora/documentation/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Rexora Hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useRexoraState","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-state","docId":"rexora-hooks/use-rexora-state","unlisted":false},{"type":"link","label":"useRexoraBoolean","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-boolean","docId":"rexora-hooks/use-rexora-boolean","unlisted":false},{"type":"link","label":"useRexoraIdle","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-idle","docId":"rexora-hooks/use-rexora-idle","unlisted":false},{"type":"link","label":"useRexoraAsync","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-async","docId":"rexora-hooks/use-rexora-async","unlisted":false},{"type":"link","label":"use-rexora-debounce-effect","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-debounce-effect","docId":"rexora-hooks/use-rexora-debounce-effect","unlisted":false},{"type":"link","label":"useRexoraDebounce","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-debounce","docId":"rexora-hooks/use-rexora-debounce","unlisted":false},{"type":"link","label":"useRexoraDocumentVisibility","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-document-visibility","docId":"rexora-hooks/use-rexora-document-visibility","unlisted":false},{"type":"link","label":"useRexoraFetch","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-fetch","docId":"rexora-hooks/use-rexora-fetch","unlisted":false},{"type":"link","label":"useRexoraFirstRender","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-first-render","docId":"rexora-hooks/use-rexora-first-render","unlisted":false},{"type":"link","label":"useRexoraForceUpdate","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-force-update","docId":"rexora-hooks/use-rexora-force-update","unlisted":false},{"type":"link","label":"useRexoraHover","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-hover","docId":"rexora-hooks/use-rexora-hover","unlisted":false},{"type":"link","label":"useRexoraInterval","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-interval","docId":"rexora-hooks/use-rexora-interval","unlisted":false},{"type":"link","label":"useRexoraIsomorphicLayoutEffect","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-isomorphic-layout-effect","docId":"rexora-hooks/use-rexora-isomorphic-layout-effect","unlisted":false},{"type":"link","label":"useRexoraLatest","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-latest","docId":"rexora-hooks/use-rexora-latest","unlisted":false},{"type":"link","label":"useRexoraMounted","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-mounted","docId":"rexora-hooks/use-rexora-mounted","unlisted":false},{"type":"link","label":"useRexoraOnline","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-online","docId":"rexora-hooks/use-rexora-online","unlisted":false},{"type":"link","label":"useRexoraRenderCount","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-render-count","docId":"rexora-hooks/use-rexora-render-count","unlisted":false},{"type":"link","label":"useRexoraRetry","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-retry","docId":"rexora-hooks/use-rexora-retry","unlisted":false},{"type":"link","label":"useRexoraThrottle","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-throttle","docId":"rexora-hooks/use-rexora-throttle","unlisted":false},{"type":"link","label":"useRexoraTimeout","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-timeout","docId":"rexora-hooks/use-rexora-timeout","unlisted":false},{"type":"link","label":"useRexoraToggle","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-toggle","docId":"rexora-hooks/use-rexora-toggle","unlisted":false},{"type":"link","label":"useRexoraUpdateEffect","href":"/rexora/documentation/docs/rexora-hooks/use-rexora-update-effect","docId":"rexora-hooks/use-rexora-update-effect","unlisted":false}],"href":"/rexora/documentation/docs/category/rexora-hooks"}]},"docs":{"intro":{"id":"intro","title":"Intro","description":"Welcome to the Rexora documentation! Discover how Rexora can help you build modern, robust web applications efficiently.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-async":{"id":"rexora-hooks/use-rexora-async","title":"useRexoraAsync","description":"The useRexoraAsync hook is a React hook that simplifies handling asynchronous operations, such as Promises or async functions, by managing their state (loading, success, error).","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-boolean":{"id":"rexora-hooks/use-rexora-boolean","title":"useRexoraBoolean","description":"The useRexoraBoolean hook is a simple utility hook for managing a boolean state with dedicated functions to set it to true, false, or toggle its value.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-debounce":{"id":"rexora-hooks/use-rexora-debounce","title":"useRexoraDebounce","description":"The useRexoraDebounce hook provides a way to debounce a value in your React components. This is useful when you have a value that changes frequently, and you want to perform an action based on that value only after a certain period of inactivity.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-debounce-effect":{"id":"rexora-hooks/use-rexora-debounce-effect","title":"use-rexora-debounce-effect","description":"---","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-document-visibility":{"id":"rexora-hooks/use-rexora-document-visibility","title":"useRexoraDocumentVisibility","description":"---","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-fetch":{"id":"rexora-hooks/use-rexora-fetch","title":"useRexoraFetch","description":"The useRexoraFetch hook provides a simplified and declarative way to perform data fetching in your React components. It abstracts away the complexities of managing fetch requests, loading states, and errors.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-first-render":{"id":"rexora-hooks/use-rexora-first-render","title":"useRexoraFirstRender","description":"The useRexoraFirstRender hook is a simple utility that returns a boolean value indicating whether the current render is the first render of the component.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-force-update":{"id":"rexora-hooks/use-rexora-force-update","title":"useRexoraForceUpdate","description":"The useRexoraForceUpdate hook provides a simple way to force a component to re-render. While React typically handles re-renders based on state and prop changes, there might be rare cases where you need to imperatively trigger an update.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-hover":{"id":"rexora-hooks/use-rexora-hover","title":"useRexoraHover","description":"The useRexoraHover hook is a utility that detects whether a specified DOM element is currently being hovered over by the user\'s mouse. It provides a simple boolean value that updates in real-time based on mouse enter and leave events on the target element.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-idle":{"id":"rexora-hooks/use-rexora-idle","title":"useRexoraIdle","description":"The useRexoraIdle hook detects if the user is idle based on their activity (mousemove, keydown, scroll, etc.).","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-interval":{"id":"rexora-hooks/use-rexora-interval","title":"useRexoraInterval","description":"The useRexoraInterval hook provides a convenient way to set up and manage an interval in a React component. It allows you to execute a callback function repeatedly at a specified time interval and provides a function to clear the interval when needed.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-isomorphic-layout-effect":{"id":"rexora-hooks/use-rexora-isomorphic-layout-effect","title":"useRexoraIsomorphicLayoutEffect","description":"The useRexoraIsomorphicLayoutEffect hook is an isomorphic version of React\'s useLayoutEffect. It functions identically to useLayoutEffect on the client-side, running synchronously after all DOM mutations. However, unlike useLayoutEffect, it gracefully degrades to a useEffect on the server-side to prevent warnings and errors during server rendering.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-latest":{"id":"rexora-hooks/use-rexora-latest","title":"useRexoraLatest","description":"The useRexoraLatest hook provides a way to access the most recent value of a state or prop, even from within closures that might have captured an older value. This is particularly useful in scenarios where you need to access the current value of a dependency inside effects or event handlers without adding that dependency to the dependency array, which could cause unwanted re-executions.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-mounted":{"id":"rexora-hooks/use-rexora-mounted","title":"useRexoraMounted","description":"useRexoraMounted can be imported from @rexora/hooks.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-online":{"id":"rexora-hooks/use-rexora-online","title":"useRexoraOnline","description":"The useRexoraOnline hook is a simple utility hook that allows you to detect if the user\'s browser is currently online or offline. It leverages the browser\'s navigator.onLine property and listens for online and offline events to provide a reactive state reflecting the network connection status.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-render-count":{"id":"rexora-hooks/use-rexora-render-count","title":"useRexoraRenderCount","description":"The useRexoraRenderCount hook tracks and returns the number of times a component has rendered. This hook is primarily useful for debugging and understanding component render behavior.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-retry":{"id":"rexora-hooks/use-rexora-retry","title":"useRexoraRetry","description":"The useRexoraRetry hook provides a mechanism to automatically retry a failed asynchronous operation (like a fetch request) a specified number of times with optional delays between retries.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-state":{"id":"rexora-hooks/use-rexora-state","title":"useRexoraState","description":"useRexoraState is a custom React hook that provides a flexible way to manage state using a reducer pattern. It allows you to set, reset, and remove specific keys from a state object.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-throttle":{"id":"rexora-hooks/use-rexora-throttle","title":"useRexoraThrottle","description":"useRexoraThrottle is a custom React hook that throttles a value or a function. Throttling is a technique used to limit the rate at which a function or value is updated. When you throttle, the function is guaranteed to execute at most once within a specified time interval, even if it\'s called multiple times during that interval.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-timeout":{"id":"rexora-hooks/use-rexora-timeout","title":"useRexoraTimeout","description":"The useRexoraTimeout hook provides a convenient way to set and clear a timeout within a React component. It ensures that the timeout is properly cleared when the component unmounts or when the delay or callback function changes.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-toggle":{"id":"rexora-hooks/use-rexora-toggle","title":"useRexoraToggle","description":"useRexoraToggle is a custom React hook that simplifies the management of a boolean state, providing a convenient function to toggle its value.","sidebar":"tutorialSidebar"},"rexora-hooks/use-rexora-update-effect":{"id":"rexora-hooks/use-rexora-update-effect","title":"useRexoraUpdateEffect","description":"The useRexoraUpdateEffect hook is similar to React\'s built-in useEffect, but with one key difference: it does not run on the initial render of the component. It only executes the effect function when the dependencies array changes. This is useful when you need to perform side effects only in response to updates, and not when the component first mounts.","sidebar":"tutorialSidebar"}}}}')}}]);