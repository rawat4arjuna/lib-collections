"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2646],{1184:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(4041);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},7900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rexora-hooks/use-rexora-state","title":"useRexoraState","description":"useRexoraState is a custom React hook that provides a flexible way to manage state using a reducer pattern. It allows you to set, reset, and remove specific keys from a state object.","source":"@site/docs/rexora-hooks/use-rexora-state.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-state","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-state","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Congratulations!","permalink":"/rexora/documentation/docs/rexora-hooks/congratulations"},"next":{"title":"Tutorial - Extras","permalink":"/rexora/documentation/docs/category/tutorial---extras"}}');var o=n(1085),s=n(1184);const r={},i="useRexoraState",c={},l=[{value:"Functionality",id:"functionality",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Examples",id:"usage-examples",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"userexorastate",children:"useRexoraState"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useRexoraState"})," is a custom React hook that provides a flexible way to manage state using a reducer pattern. It allows you to set, reset, and remove specific keys from a state object."]}),"\n",(0,o.jsx)(t.h2,{id:"functionality",children:"Functionality"}),"\n",(0,o.jsx)(t.p,{children:"This hook initializes a state object and provides functions to interact with that state:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Setting State:"})," You can update the state by providing a key-value pair or an object containing multiple key-value pairs."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Resetting State:"})," Clears the entire state object, returning it to its initial empty state."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Removing State:"})," Removes a specific key and its corresponding value from the state object."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["It leverages React's ",(0,o.jsx)(t.code,{children:"useReducer"})," hook internally to manage state transitions based on defined actions."]}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"initialState"})," (optional): The initial state object. Defaults to an empty object ",(0,o.jsx)(t.code,{children:"{}"}),". Can be of any type extending ",(0,o.jsx)(t.code,{children:"Record<string, any>"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsx)(t.p,{children:"The hook returns a tuple containing:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"state"}),": The current state object."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"setState"}),": A function to update the state. It accepts either:","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"key"})," (string) and ",(0,o.jsx)(t.code,{children:"value"})," (any): Sets the value for the specified key."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"partialState"})," (object): Merges the provided object into the current state."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"removeState"}),": A function to remove a specific key from the state. Accepts the ",(0,o.jsx)(t.code,{children:"key"})," (string) to be removed."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"resetState"}),": A function to reset the state to its initial empty state."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"jsx\nimport React from 'react';\nimport useRexoraState from './useRexoraState'; // Adjust the import path\n\nfunction StateComponent() {\n  const [state, setState, removeState, resetState] = useRexoraState({\n    count: 0,\n    text: 'Hello',\n    data: {}\n  });\n\n  const handleIncrement = () => {\n    setState('count', state.count + 1);\n  };\n\n  const handleSetText = (e) => {\n    setState('text', e.target.value);\n  };\n\n  const handleSetData = () => {\n    setState('data', { value: Math.random() });\n  };\n\n  const handleRemoveText = () => {\n    removeState('text');\n  };\n\n  const handleReset = () => {\n    resetState();\n  };\n\n  return (\n    <div>\n      <h2>Current State:</h2>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n\n      <h3>Actions:</h3>\n      <button onClick={handleIncrement}>Increment Count</button>\n      <br />\n      <input type=\"text\" value={state.text || ''} onChange={handleSetText} placeholder=\"Set Text\" />\n      <br />\n      <button onClick={handleSetData}>Set Data</button>\n      <br />\n      <button onClick={handleRemoveText}>Remove Text</button>\n      <br />\n      <button onClick={handleReset}>Reset State</button>\n    </div>\n  );\n}\n\nexport default StateComponent;\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Setting multiple values with an object:"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);