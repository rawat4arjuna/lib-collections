"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9842],{1184:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var n=s(4041);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},9135:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rexora-hooks/use-rexora-idle","title":"useRexoraIdle","description":"The useRexoraIdle hook detects if the user is idle based on their activity (mousemove, keydown, scroll, etc.).","source":"@site/docs/rexora-hooks/use-rexora-idle.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-idle","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-idle","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"sidebar_position":18},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraBoolean","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-boolean"},"next":{"title":"useRexoraAsync","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-async"}}');var r=s(1085),i=s(1184);const o={sidebar_position:18},l="useRexoraIdle",d={},c=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Description",id:"description",level:2},{value:"Notes",id:"notes",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"userexoraidle",children:"useRexoraIdle"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useRexoraIdle"})," hook detects if the user is idle based on their activity (mousemove, keydown, scroll, etc.).\nIt is imported from ",(0,r.jsx)(t.code,{children:"@rexora/hooks"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"typescript\nimport { useRexoraIdle } from 'rexora-hooks'; // Assuming rexora-hooks is your package name\n\nfunction MyComponent() {\n  const isIdle = useRexoraIdle(3000); // 3000ms = 3 seconds\n\n  return (\n    <div>\n      {isIdle ? 'User is idle' : 'User is active'}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Default"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"timeout"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"number"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The time in milliseconds after which the user is considered idle."}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"60000"})," (1 minute)"]})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(t.p,{children:"The hook returns a boolean value:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"true"}),": The user is currently idle."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"false"}),": The user is currently active."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(t.p,{children:["This hook tracks user activity by listening to common DOM events like ",(0,r.jsx)(t.code,{children:"mousemove"}),", ",(0,r.jsx)(t.code,{children:"keydown"}),", and ",(0,r.jsx)(t.code,{children:"scroll"}),". If no such events occur within the specified ",(0,r.jsx)(t.code,{children:"timeout"})," period, the hook's state changes to ",(0,r.jsx)(t.code,{children:"true"}),", indicating the user is idle. Any subsequent activity resets the timer and sets the state back to ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"This hook is useful for implementing features like:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:'Displaying a "Are you still there?" prompt.'}),"\n",(0,r.jsx)(t.li,{children:"Logging out inactive users."}),"\n",(0,r.jsx)(t.li,{children:"Pausing animations or other resource-intensive tasks when the user is away."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The hook attaches event listeners globally to the ",(0,r.jsx)(t.code,{children:"window"})," object."]}),"\n",(0,r.jsx)(t.li,{children:"Ensure the component using this hook is mounted for the listeners to be active. The listeners are cleaned up automatically when the component unmounts."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);