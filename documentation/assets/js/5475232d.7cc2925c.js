"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2631],{1184:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(4041);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},6088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"rexora-hooks/use-rexora-fetch","title":"useRexoraFetch","description":"The useRexoraFetch hook provides a simplified and declarative way to perform data fetching in your React components. It abstracts away the complexities of managing fetch requests, loading states, and errors.","source":"@site/docs/rexora-hooks/use-rexora-fetch.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-fetch","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-fetch","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-fetch","title":"useRexoraFetch","sidebar_label":"useRexoraFetch"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraDocumentVisibility","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-document-visibility"},"next":{"title":"useRexoraFirstRender","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-first-render"}}');var s=n(1085),i=n(1184);const o={id:"use-rexora-fetch",title:"useRexoraFetch",sidebar_label:"useRexoraFetch"},l=void 0,d={},a=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Fetching with POST method",id:"fetching-with-post-method",level:3},{value:"Handling different response types",id:"handling-different-response-types",level:3},{value:"Notes",id:"notes",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"useRexoraFetch"})," hook provides a simplified and declarative way to perform data fetching in your React components. It abstracts away the complexities of managing fetch requests, loading states, and errors."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"jsx\nimport useRexoraFetch from '@rexora/hooks/useRexoraFetch';\n\nfunction MyComponent() {\n  const { data, loading, error } = useRexoraFetch('https://api.example.com/data');\n\n  if (loading) {\n    return <p>Loading data...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  return (\n    <div>\n      <h2>Data:</h2>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"url"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"string"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The URL to fetch data from."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"options"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"RequestInit"})," (optional)"]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Optional Fetch API request options."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"dependencies"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"any[]"})," (optional)"]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"An array of dependencies for the effect. The fetch will re-run when dependencies change."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(t.p,{children:"The hook returns an object with the following properties:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"data"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"any"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["The fetched data. Will be ",(0,s.jsx)(t.code,{children:"undefined"})," initially."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"loading"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"boolean"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Indicates if the fetch request is currently in progress."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"error"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Error"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["An error object if the fetch failed. Will be ",(0,s.jsx)(t.code,{children:"undefined"})," if successful."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.h3,{id:"fetching-with-post-method",children:"Fetching with POST method"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"jsx\nimport useRexoraFetch from '@rexora/hooks/useRexoraFetch';\nimport { useState } from 'react';\n\nfunction PostDataComponent() {\n  const [postBody, setPostBody] = useState({ name: 'Test' });\n  const { data, loading, error } = useRexoraFetch('https://api.example.com/submit', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(postBody),\n  }, [postBody]); // Re-run fetch when postBody changes\n\n  // ... render logic\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"handling-different-response-types",children:"Handling different response types"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"data"})," property will contain the parsed response. By default, it assumes JSON. You might need to handle other response types manually within your component or extend the hook."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"jsx\nimport useRexoraFetch from '@rexora/hooks/useRexoraFetch';\n\nfunction TextDataComponent() {\n  const { data, loading, error } = useRexoraFetch('https://api.example.com/text-data');\n\n  // ... assumes data is plain text\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The hook uses ",(0,s.jsx)(t.code,{children:"useEffect"})," internally, so be mindful of the ",(0,s.jsx)(t.code,{children:"dependencies"})," array to control when the fetch request is re-run."]}),"\n",(0,s.jsx)(t.li,{children:"Error handling is basic. You might want to add more sophisticated error management in your application."}),"\n",(0,s.jsx)(t.li,{children:"For more complex data fetching scenarios, consider using a dedicated data fetching library like SWR or React Query."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);