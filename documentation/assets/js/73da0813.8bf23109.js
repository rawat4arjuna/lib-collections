"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8424],{1184:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>c});var n=o(4041);const t={},a=n.createContext(t);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(a.Provider,{value:r},e.children)}},6387:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rexora-hooks/use-rexora-force-update","title":"useRexoraForceUpdate","description":"The useRexoraForceUpdate hook provides a simple way to force a component to re-render. While React typically handles re-renders based on state and prop changes, there might be rare cases where you need to imperatively trigger an update.","source":"@site/docs/rexora-hooks/use-rexora-force-update.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-force-update","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-force-update","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-force-update","title":"useRexoraForceUpdate"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraFirstRender","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-first-render"},"next":{"title":"useRexoraHover","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-hover"}}');var t=o(1085),a=o(1184);const s={id:"use-rexora-force-update",title:"useRexoraForceUpdate"},c=void 0,i={},d=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function l(e){const r={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"useRexoraForceUpdate"})," hook provides a simple way to force a component to re-render. While React typically handles re-renders based on state and prop changes, there might be rare cases where you need to imperatively trigger an update."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Important:"})," Using ",(0,t.jsx)(r.code,{children:"useRexoraForceUpdate"})," is generally discouraged in favor of managing component state or props to trigger updates. Use it sparingly and only when necessary."]}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"javascript\nimport { useRexoraForceUpdate } from '@rexora/hooks';\nimport React from 'react';\n\nfunction MyComponent() {\n  const forceUpdate = useRexoraForceUpdate();\n\n  const handleButtonClick = () => {\n    // Perform some action that doesn't directly change state or props,\n    // but requires a re-render.\n    console.log('Forcing update...');\n    forceUpdate();\n  };\n\n  return (\n    <div>\n      <p>This component can be force updated.</p>\n      <button onClick={handleButtonClick}>Force Update</button>\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(r.p,{children:"This hook does not accept any parameters."}),"\n",(0,t.jsx)(r.h2,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsx)(r.p,{children:"The hook returns a function:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"forceUpdate"}),": A function that, when called, will trigger a re-render of the component."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"example",children:"Example"})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);