"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[152],{1184:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(4041);const o={},s=t.createContext(o);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:r},e.children)}},2862:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rexora-hooks/use-rexora-first-render","title":"useRexoraFirstRender","description":"The useRexoraFirstRender hook is a simple utility that returns a boolean value indicating whether the current render is the first render of the component.","source":"@site/docs/rexora-hooks/use-rexora-first-render.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-first-render","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-first-render","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-first-render","title":"useRexoraFirstRender","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraFetch","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-fetch"},"next":{"title":"useRexoraForceUpdate","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-force-update"}}');var o=n(1085),s=n(1184);const i={id:"use-rexora-first-render",title:"useRexoraFirstRender",hide_title:!0},a=void 0,d={},c=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Example",id:"example",level:2}];function u(e){const r={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"useRexoraFirstRender"})," hook is a simple utility that returns a boolean value indicating whether the current render is the first render of the component."]}),"\n",(0,o.jsxs)(r.p,{children:["It's imported from ",(0,o.jsx)(r.code,{children:"@rexora/hooks"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"typescript\nimport { useRexoraFirstRender } from '@rexora/hooks';\nimport React from 'react';\n\nfunction MyComponent() {\n  const isFirstRender = useRexoraFirstRender();\n\n  if (isFirstRender) {\n    console.log('This is the first render!');\n    // Perform actions specific to the first render\n  }\n\n  return (\n    <div>\n      {isFirstRender ? 'Rendering for the first time' : 'Subsequent render'}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(r.p,{children:"This hook takes no parameters."}),"\n",(0,o.jsx)(r.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsx)(r.p,{children:"The hook returns a single boolean value:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"true"}),": If the current render is the initial render of the component."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"false"}),": If the current render is a subsequent render."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"typescript\nimport { useRexoraFirstRender } from '@rexora/hooks';\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const isFirstRender = useRexoraFirstRender();\n\n  // This effect will only run on the first render\n  React.useEffect(() => {\n    if (isFirstRender) {\n      console.log('Component mounted for the first time.');\n    }\n  }, [isFirstRender]); // Dependency array includes isFirstRender for clarity, though it won't change\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <p>{isFirstRender ? 'Initial Render' : 'Updated Render'}</p>\n    </div>\n  );\n}\n\nexport default Counter;\n"})}),"\n",(0,o.jsxs)(r.p,{children:["In this example, the ",(0,o.jsx)(r.code,{children:"useEffect"})," with the ",(0,o.jsx)(r.code,{children:"isFirstRender"})," check will only execute its console log when the ",(0,o.jsx)(r.code,{children:"Counter"})," component is first mounted. The text below the button will also visually indicate whether it's the initial or a subsequent render."]})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);