"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9294],{1184:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var l=n(4041);const o={},s=l.createContext(o);function r(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),l.createElement(s.Provider,{value:t},e.children)}},7374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>x,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"rexora-hooks/use-rexora-toggle","title":"useRexoraToggle","description":"useRexoraToggle is a custom React hook that simplifies the management of a boolean state, providing a convenient function to toggle its value.","source":"@site/docs/rexora-hooks/use-rexora-toggle.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-toggle","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-toggle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-toggle","title":"useRexoraToggle"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraTimeout","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-timeout"},"next":{"title":"useRexoraUpdateEffect","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-update-effect"}}');var o=n(1085),s=n(1184);const r={id:"use-rexora-toggle",title:"useRexoraToggle"},i=void 0,a={},c=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Toggle",id:"basic-toggle",level:3},{value:"Initial Value",id:"initial-value",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useRexoraToggle"})," is a custom React hook that simplifies the management of a boolean state, providing a convenient function to toggle its value."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"typescript\nimport { useRexoraToggle } from '@rexora/hooks';\n\nfunction MyComponent() {\n  const [isToggled, toggle] = useRexoraToggle(false);\n\n  return (\n    <div>\n      <p>State is: {isToggled ? 'On' : 'Off'}</p>\n      <button onClick={toggle}>Toggle</button>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useRexoraToggle"})," accepts one optional parameter:"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Default"})]})}),(0,o.jsx)(t.tbody,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"initialValue"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"boolean"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The initial state value."}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"false"})})]})})]}),"\n",(0,o.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"useRexoraToggle"})," returns an array with two elements:"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Element"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"state"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"boolean"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The current boolean state."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"toggle"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"() => void"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"A function to toggle the boolean state value."})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(t.h3,{id:"basic-toggle",children:"Basic Toggle"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"typescript\nimport { useRexoraToggle } from '@rexora/hooks';\n\nfunction BasicToggle() {\n  const [isActive, toggleIsActive] = useRexoraToggle();\n\n  return (\n    <div>\n      <p>Active: {isActive ? 'Yes' : 'No'}</p>\n      <button onClick={toggleIsActive}>Toggle Active State</button>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"initial-value",children:"Initial Value"})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);