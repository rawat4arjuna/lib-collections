"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8619],{1184:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(4041);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},5647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rexora-hooks/use-rexora-isomorphic-layout-effect","title":"useRexoraIsomorphicLayoutEffect","description":"The useRexoraIsomorphicLayoutEffect hook is an isomorphic version of React\'s useLayoutEffect. It functions identically to useLayoutEffect on the client-side, running synchronously after all DOM mutations. However, unlike useLayoutEffect, it gracefully degrades to a useEffect on the server-side to prevent warnings and errors during server rendering.","source":"@site/docs/rexora-hooks/use-rexora-isomorphic-layout-effect.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-isomorphic-layout-effect","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-isomorphic-layout-effect","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-isomorphic-layout-effect","title":"useRexoraIsomorphicLayoutEffect"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraInterval","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-interval"},"next":{"title":"useRexoraLatest","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-latest"}}');var o=n(1085),s=n(1184);const i={id:"use-rexora-isomorphic-layout-effect",title:"useRexoraIsomorphicLayoutEffect"},c=void 0,a={},l=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"useRexoraIsomorphicLayoutEffect"})," hook is an isomorphic version of React's ",(0,o.jsx)(t.code,{children:"useLayoutEffect"}),". It functions identically to ",(0,o.jsx)(t.code,{children:"useLayoutEffect"})," on the client-side, running synchronously after all DOM mutations. However, unlike ",(0,o.jsx)(t.code,{children:"useLayoutEffect"}),", it gracefully degrades to a ",(0,o.jsx)(t.code,{children:"useEffect"})," on the server-side to prevent warnings and errors during server rendering."]}),"\n",(0,o.jsx)(t.p,{children:"This hook is useful when you need to perform DOM measurements or manipulate the DOM immediately after a render, but you also want your application to support server-side rendering without issues."}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"typescript\nimport { useRexoraIsomorphicLayoutEffect } from '@rexora/hooks';\n\nfunction MyComponent() {\n  const [height, setHeight] = React.useState(0);\n  const elementRef = React.useRef(null);\n\n  useRexoraIsomorphicLayoutEffect(() => {\n    if (elementRef.current) {\n      setHeight(elementRef.current.offsetHeight);\n    }\n  }, [elementRef.current]);\n\n  return (\n    <div ref={elementRef}>\n      Content with dynamic height. Height: {height}px\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"effect"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"() => void | (() => void)"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The function to run after DOM mutations. Can optionally return a cleanup function."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"deps"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"React.DependencyList | undefined"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"An array of dependencies. The effect will re-run if these dependencies change."})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsxs)(t.p,{children:["This hook does not return a value. Similar to ",(0,o.jsx)(t.code,{children:"useEffect"})," and ",(0,o.jsx)(t.code,{children:"useLayoutEffect"}),", the primary interaction is through the side effect defined in the ",(0,o.jsx)(t.code,{children:"effect"})," callback and the optional cleanup function it returns."]}),"\n",(0,o.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"On the client, this hook runs synchronously after all DOM mutations."}),"\n",(0,o.jsxs)(t.li,{children:["On the server, this hook runs asynchronously like ",(0,o.jsx)(t.code,{children:"useEffect"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Use this hook when you need DOM access immediately after render and support server-side rendering. For effects that don't require DOM measurement or manipulation, use ",(0,o.jsx)(t.code,{children:"useEffect"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);