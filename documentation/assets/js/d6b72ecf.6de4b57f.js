"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4360],{1184:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var r=n(4041);const o={},a=r.createContext(o);function l(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(a.Provider,{value:t},e.children)}},3161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rexora-hooks/use-rexora-interval","title":"useRexoraInterval","description":"The useRexoraInterval hook provides a convenient way to set up and manage an interval in a React component. It allows you to execute a callback function repeatedly at a specified time interval and provides a function to clear the interval when needed.","source":"@site/docs/rexora-hooks/use-rexora-interval.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-interval","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-interval","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-interval","title":"useRexoraInterval"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraHover","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-hover"},"next":{"title":"useRexoraIsomorphicLayoutEffect","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-isomorphic-layout-effect"}}');var o=n(1085),a=n(1184);const l={id:"use-rexora-interval",title:"useRexoraInterval"},s=void 0,i={},c=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Clearing the Interval",id:"clearing-the-interval",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"useRexoraInterval"})," hook provides a convenient way to set up and manage an interval in a React component. It allows you to execute a callback function repeatedly at a specified time interval and provides a function to clear the interval when needed."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"jsx\nimport { useRexoraInterval } from 'rexora-hooks';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n\n  // Set an interval to increment the count every 1000 milliseconds (1 second)\n  useRexoraInterval(() => {\n    setCount(prevCount => prevCount + 1);\n  }, 1000);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"callback"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"() => void"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The function to be executed at each interval."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"delay"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"number"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The delay in milliseconds between successive executions of the callback."})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsx)(t.p,{children:"This hook does not return any value directly. It manages the interval internally."}),"\n",(0,o.jsx)(t.h2,{id:"clearing-the-interval",children:"Clearing the Interval"}),"\n",(0,o.jsxs)(t.p,{children:["The interval is automatically cleared when the component unmounts. If you need to manually clear the interval before the component unmounts (e.g., based on a condition), you would typically manage the interval ID using ",(0,o.jsx)(t.code,{children:"useState"})," and ",(0,o.jsx)(t.code,{children:"useEffect"})," and use ",(0,o.jsx)(t.code,{children:"clearInterval"}),". The ",(0,o.jsx)(t.code,{children:"useRexoraInterval"})," hook abstracts this pattern for simplicity in common use cases."]}),"\n",(0,o.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"callback"})," function is memoized internally to prevent unnecessary re-renders of the interval."]}),"\n",(0,o.jsx)(t.li,{children:"Be mindful of potential performance implications when using intervals, especially with short delays."}),"\n",(0,o.jsxs)(t.li,{children:["Ensure that any state updates within the ",(0,o.jsx)(t.code,{children:"callback"})," use the functional update form (e.g., ",(0,o.jsx)(t.code,{children:"setCount(prevCount => prevCount + 1)"}),") to avoid issues with stale closures."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);