"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3094],{1184:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var r=o(4041);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},6187:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"rexora-hooks/use-rexora-debounce","title":"useRexoraDebounce","description":"The useRexoraDebounce hook provides a way to debounce a value in your React components. This is useful when you have a value that changes frequently, and you want to perform an action based on that value only after a certain period of inactivity.","source":"@site/docs/rexora-hooks/use-rexora-debounce.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-debounce","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-debounce","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use-rexora-debounce","title":"useRexoraDebounce"},"sidebar":"tutorialSidebar","previous":{"title":"use-rexora-debounce-effect","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-debounce-effect"},"next":{"title":"useRexoraDocumentVisibility","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-document-visibility"}}');var t=o(1085),a=o(1184);const s={id:"use-rexora-debounce",title:"useRexoraDebounce"},c=void 0,i={},u=[{value:"Functionality",id:"functionality",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Examples",id:"usage-examples",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useRexoraDebounce"})," hook provides a way to debounce a value in your React components. This is useful when you have a value that changes frequently, and you want to perform an action based on that value only after a certain period of inactivity."]}),"\n",(0,t.jsx)(n.h2,{id:"functionality",children:"Functionality"}),"\n",(0,t.jsxs)(n.p,{children:["This hook takes a value and a delay as input. It returns the debounced value, which will only update after the specified ",(0,t.jsx)(n.code,{children:"delay"})," has passed without the input ",(0,t.jsx)(n.code,{children:"value"})," changing. This prevents unnecessary re-renders or side effects that might occur with every change of the input value."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"}),": The value to debounce. This can be of any type."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"delay"}),": The time in milliseconds to wait after the last change of the ",(0,t.jsx)(n.code,{children:"value"})," before updating the debounced value."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsx)(n.p,{children:"The hook returns the debounced value."}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"jsx\nimport React, { useState } from 'react';\nimport { useRexoraDebounce } from 'rexora-hooks';\n\nfunction SearchInput() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useRexoraDebounce(searchTerm, 500); // Debounce with 500ms delay\n\n  // Perform search operation when the debouncedSearchTerm changes\n  React.useEffect(() => {\n    if (debouncedSearchTerm) {\n      console.log('Searching for:', debouncedSearchTerm);\n      // Call your search API or perform the search logic here\n    }\n  }, [debouncedSearchTerm]);\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Search...\"\n      value={searchTerm}\n      onChange={(e) => setSearchTerm(e.target.value)}\n    />\n  );\n}\n\nexport default SearchInput;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the ",(0,t.jsx)(n.code,{children:"useRexoraDebounce"})," hook is used to debounce the ",(0,t.jsx)(n.code,{children:"searchTerm"}),". The ",(0,t.jsx)(n.code,{children:"console.log"})," and the search logic inside the ",(0,t.jsx)(n.code,{children:"useEffect"})," will only be executed 500 milliseconds after the user stops typing, preventing excessive calls while the user is still inputting their query."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);