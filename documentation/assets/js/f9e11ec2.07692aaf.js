"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2487],{1184:(e,t,l)=>{l.d(t,{R:()=>i,x:()=>d});var n=l(4041);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}},3750:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"rexora-charts/LollipopChart","title":"Lollipop Chart","description":"A Lollipop Chart is a variation of a bar chart where each bar is replaced by a line ending in a dot. It\'s useful for comparing values across different categories, especially when the number of categories is large.","source":"@site/docs/rexora-charts/LollipopChart.md","sourceDirName":"rexora-charts","slug":"/rexora-charts/LollipopChart","permalink":"/rexora/documentation/docs/rexora-charts/LollipopChart","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Line Chart","permalink":"/rexora/documentation/docs/rexora-charts/LineChart"},"next":{"title":"Radar Chart (Spider Chart)","permalink":"/rexora/documentation/docs/rexora-charts/RadarChart"}}');var r=l(1085),s=l(1184);const i={},d="Lollipop Chart",c={},o=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Props and Options",id:"props-and-options",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"lollipop-chart",children:"Lollipop Chart"})}),"\n",(0,r.jsx)(t.p,{children:"A Lollipop Chart is a variation of a bar chart where each bar is replaced by a line ending in a dot. It's useful for comparing values across different categories, especially when the number of categories is large."}),"\n",(0,r.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(t.p,{children:["The Lollipop Chart component is part of the ",(0,r.jsx)(t.code,{children:"@rexora/charts"})," package. You can install it using npm or yarn:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"bash\nnpm install @rexora/charts\n# or\nyarn add @rexora/charts\n"})}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Here's a basic example of how to use the ",(0,r.jsx)(t.code,{children:"LollipopChart"})," component:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"tsx\nimport React from 'react';\nimport { LollipopChart } from '@rexora/charts';\n\nconst data = [\n  { category: 'A', value: 20 },\n  { category: 'B', value: 45 },\n  { category: 'C', value: 30 },\n  { category: 'D', value: 60 },\n  { category: 'E', value: 25 },\n];\n\nconst MyLollipopChart = () => {\n  return (\n    <div style={{ width: '100%', height: '300px' }}>\n      <LollipopChart data={data} />\n    </div>\n  );\n};\n\nexport default MyLollipopChart;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"props-and-options",children:"Props and Options"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"LollipopChart"})," component accepts the following props:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Prop Name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Default"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"data"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"Array<object>"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"An array of data objects. Each object should have properties for the category and value."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"[]"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"width"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"number"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The width of the chart container (optional, for fixed size)."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"'100%'"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"height"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"number"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The height of the chart container (optional, for fixed size)."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"'300px'"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"margin"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Margins for the chart (top, right, bottom, left)."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"{ top: 20, right: 20, bottom: 30, left: 40 }"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"categoryAccessor"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"(d: object) => string"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Accessor function for the category value."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"d => d.category"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"valueAccessor"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"(d: object) => number"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Accessor function for the value."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"d => d.value"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"color"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"string"})," or ",(0,r.jsx)(t.code,{children:"(d: object) => string"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Color of the lollipop line and circle."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"'steelblue'"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"circleRadius"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"number"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The radius of the circle at the end of the line."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"4"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"xAxisLabel"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Label for the x-axis."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"''"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"yAxisLabel"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Label for the y-axis."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"''"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"tooltip"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"(d: object) => React.ReactNode"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"A function to render a custom tooltip content."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"undefined"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"responsive"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"boolean"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Whether the chart should be responsive."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"true"})})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note:"})," When ",(0,r.jsx)(t.code,{children:"responsive"})," is true, ",(0,r.jsx)(t.code,{children:"width"})," and ",(0,r.jsx)(t.code,{children:"height"})," props will be used as initial dimensions, and the chart will resize with its container."]})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);