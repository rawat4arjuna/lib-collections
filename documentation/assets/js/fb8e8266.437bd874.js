"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7352],{1184:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(4041);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}},2881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rexora-hooks/use-rexora-hover","title":"useRexoraHover","description":"The useRexoraHover hook is a utility that detects whether a specified DOM element is currently being hovered over by the user\'s mouse. It provides a simple boolean value that updates in real-time based on mouse enter and leave events on the target element.","source":"@site/docs/rexora-hooks/use-rexora-hover.md","sourceDirName":"rexora-hooks","slug":"/rexora-hooks/use-rexora-hover","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-hover","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"useRexoraHover","sidebar_label":"useRexoraHover"},"sidebar":"tutorialSidebar","previous":{"title":"useRexoraForceUpdate","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-force-update"},"next":{"title":"useRexoraInterval","permalink":"/rexora/documentation/docs/rexora-hooks/use-rexora-interval"}}');var r=n(1085),s=n(1184);const a={title:"useRexoraHover",sidebar_label:"useRexoraHover"},i="useRexoraHover",l={},d=[{value:"Functionality",id:"functionality",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage Examples",id:"usage-examples",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"userexorahover",children:"useRexoraHover"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"useRexoraHover"})," hook is a utility that detects whether a specified DOM element is currently being hovered over by the user's mouse. It provides a simple boolean value that updates in real-time based on mouse enter and leave events on the target element."]}),"\n",(0,r.jsx)(t.h2,{id:"functionality",children:"Functionality"}),"\n",(0,r.jsxs)(t.p,{children:["This hook takes a React ref object pointing to a DOM element. It attaches event listeners for ",(0,r.jsx)(t.code,{children:"mouseenter"})," and ",(0,r.jsx)(t.code,{children:"mouseleave"})," to this element. When the mouse pointer enters the element's boundary, the hook's internal state is updated to ",(0,r.jsx)(t.code,{children:"true"}),". When the mouse pointer leaves the element's boundary, the state is updated back to ",(0,r.jsx)(t.code,{children:"false"}),". The hook returns this boolean state."]}),"\n",(0,r.jsx)(t.p,{children:"This is particularly useful for implementing UI elements that respond to hover states, such as tooltips, dropdowns, or visual changes on hover, without manually managing event listeners in your components."}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"elementRef"}),": A React ",(0,r.jsx)(t.code,{children:"RefObject"})," that is attached to the DOM element you want to track hover state for."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"isHovering"}),": A boolean value that is ",(0,r.jsx)(t.code,{children:"true"})," when the element referenced by ",(0,r.jsx)(t.code,{children:"elementRef"})," is being hovered over, and ",(0,r.jsx)(t.code,{children:"false"})," otherwise."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"jsx\nimport React, { useRef } from 'react';\nimport { useRexoraHover } from '@rexora/hooks'; // Assuming your package name is @rexora/hooks\n\nfunction MyComponent() {\n  const elementRef = useRef(null);\n  const isHovering = useRexoraHover(elementRef);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{\n        width: '200px',\n        height: '100px',\n        backgroundColor: isHovering ? 'lightblue' : 'lightgray',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transition: 'background-color 0.3s ease',\n      }}\n    >\n      {isHovering ? 'Hovering!' : 'Not Hovering'}\n    </div>\n  );\n}\n\nexport default MyComponent;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, the ",(0,r.jsx)(t.code,{children:"useRexoraHover"})," hook is used to change the background color of a ",(0,r.jsx)(t.code,{children:"div"})," element based on its hover state. The ",(0,r.jsx)(t.code,{children:"elementRef"})," is created with ",(0,r.jsx)(t.code,{children:"useRef"})," and attached to the ",(0,r.jsx)(t.code,{children:"div"}),". The ",(0,r.jsx)(t.code,{children:"isHovering"})," value returned by the hook controls the conditional styling and text content."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);